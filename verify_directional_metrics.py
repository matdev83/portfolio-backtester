#!/usr/bin/env python3
"""
Verification script for directional trade statistics functionality.
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def verify_directional_trade_tracker():
    """Verify the enhanced trade tracker with directional statistics."""
    print("üîç Verifying directional trade tracker...")
    
    try:
        import pandas as pd
        import numpy as np
        from portfolio_backtester.trading.trade_tracker import TradeTracker
        
        # Initialize tracker
        tracker = TradeTracker(portfolio_value=100000)
        
        # Create test scenario with both long and short trades
        dates = pd.date_range('2023-01-01', periods=10, freq='D')
        
        # Simulate mixed long/short positions
        for i, date in enumerate(dates[:5]):
            # Long positions
            long_weights = pd.Series({\n                'AAPL': 0.3,\n                'MSFT': 0.2\n            })\n            \n            long_prices = pd.Series({\n                'AAPL': 150 + i,\n                'MSFT': 300 + i * 2\n            })\n            \n            tracker.update_positions(date, long_weights, long_prices, 5.0)\n            tracker.update_mfe_mae(date, long_prices)\n        \n        # Switch to short positions\n        for i, date in enumerate(dates[5:], 5):\n            # Short positions (negative weights)\n            short_weights = pd.Series({\n                'AAPL': -0.2,\n                'GOOGL': -0.3\n            })\n            \n            short_prices = pd.Series({\n                'AAPL': 155 - (i-5),  # Declining price (good for shorts)\n                'GOOGL': 2500 - (i-5) * 10\n            })\n            \n            tracker.update_positions(date, short_weights, short_prices, 5.0)\n            tracker.update_mfe_mae(date, short_prices)\n        \n        # Close all positions\n        final_prices = pd.Series({'AAPL': 150, 'GOOGL': 2480})\n        tracker.close_all_positions(dates[-1], final_prices)\n        \n        # Get directional statistics\n        stats = tracker.get_trade_statistics()\n        \n        # Verify directional data structure\n        expected_directions = ['all', 'long', 'short']\n        expected_metrics = ['num_trades', 'win_rate_pct', 'largest_profit', 'largest_loss', \n                          'mean_profit', 'mean_loss', 'reward_risk_ratio']\n        \n        for direction in expected_directions:\n            for metric in expected_metrics:\n                key = f\"{direction}_{metric}\"\n                if key not in stats:\n                    print(f\"‚ùå Missing metric: {key}\")\n                    return False\n        \n        print(f\"‚úÖ Directional statistics structure verified\")\n        print(f\"‚úÖ All trades: {stats['all_num_trades']}\")\n        print(f\"‚úÖ Long trades: {stats['long_num_trades']}\")\n        print(f\"‚úÖ Short trades: {stats['short_num_trades']}\")\n        \n        # Verify table format\n        table = tracker.get_trade_statistics_table()\n        if table.empty:\n            print(\"‚ùå Trade statistics table is empty\")\n            return False\n        \n        expected_columns = ['Metric', 'All', 'Long', 'Short']\n        if not all(col in table.columns for col in expected_columns):\n            print(f\"‚ùå Missing table columns. Expected: {expected_columns}, Got: {list(table.columns)}\")\n            return False\n        \n        print(f\"‚úÖ Trade statistics table format verified ({len(table)} rows)\")\n        \n        # Verify summary format\n        summary = tracker.get_directional_summary()\n        expected_summary_keys = ['All', 'Long', 'Short']\n        if not all(key in summary for key in expected_summary_keys):\n            print(f\"‚ùå Missing summary keys. Expected: {expected_summary_keys}, Got: {list(summary.keys())}\")\n            return False\n        \n        print(f\"‚úÖ Directional summary format verified\")\n        \n        return True\n        \n    except Exception as e:\n        print(f\"‚ùå Directional trade tracker verification failed: {e}\")\n        import traceback\n        traceback.print_exc()\n        return False\n\ndef verify_enhanced_performance_metrics():\n    \"\"\"Verify enhanced performance metrics with directional data.\"\"\"\n    print(\"\\nüß™ Verifying enhanced performance metrics...\")\n    \n    try:\n        import pandas as pd\n        import numpy as np\n        from portfolio_backtester.reporting.performance_metrics import calculate_metrics\n        \n        # Create sample data\n        dates = pd.date_range('2023-01-01', periods=100, freq='D')\n        returns = pd.Series(np.random.normal(0.001, 0.02, 100), index=dates)\n        benchmark_returns = pd.Series(np.random.normal(0.0008, 0.015, 100), index=dates)\n        \n        # Create sample directional trade stats\n        trade_stats = {\n            # All trades\n            'all_num_trades': 20,\n            'all_win_rate_pct': 65.0,\n            'all_largest_profit': 500.0,\n            'all_largest_loss': -200.0,\n            'all_mean_profit': 150.0,\n            'all_mean_loss': -80.0,\n            'all_reward_risk_ratio': 1.875,\n            \n            # Long trades\n            'long_num_trades': 12,\n            'long_win_rate_pct': 70.0,\n            'long_largest_profit': 500.0,\n            'long_largest_loss': -150.0,\n            'long_mean_profit': 160.0,\n            'long_mean_loss': -75.0,\n            'long_reward_risk_ratio': 2.133,\n            \n            # Short trades\n            'short_num_trades': 8,\n            'short_win_rate_pct': 57.5,\n            'short_largest_profit': 300.0,\n            'short_largest_loss': -200.0,\n            'short_mean_profit': 140.0,\n            'short_mean_loss': -90.0,\n            'short_reward_risk_ratio': 1.556,\n            \n            # Portfolio metrics\n            'max_margin_load': 0.95,\n            'mean_margin_load': 0.75\n        }\n        \n        # Calculate enhanced metrics\n        metrics = calculate_metrics(\n            returns,\n            benchmark_returns,\n            'SPY',\n            name='Test Strategy',\n            trade_stats=trade_stats\n        )\n        \n        # Verify directional metrics are present\n        expected_directional_metrics = [\n            'Number of Trades (All)', 'Number of Trades (Long)', 'Number of Trades (Short)',\n            'Win Rate % (All)', 'Win Rate % (Long)', 'Win Rate % (Short)',\n            'Largest Single Profit (All)', 'Largest Single Profit (Long)', 'Largest Single Profit (Short)',\n            'Largest Single Loss (All)', 'Largest Single Loss (Long)', 'Largest Single Loss (Short)',\n            'Mean Profit (All)', 'Mean Profit (Long)', 'Mean Profit (Short)',\n            'Mean Loss (All)', 'Mean Loss (Long)', 'Mean Loss (Short)',\n            'Reward/Risk Ratio (All)', 'Reward/Risk Ratio (Long)', 'Reward/Risk Ratio (Short)'\n        ]\n        \n        missing_metrics = [m for m in expected_directional_metrics if m not in metrics.index]\n        if missing_metrics:\n            print(f\"‚ùå Missing directional metrics: {missing_metrics}\")\n            return False\n        \n        print(f\"‚úÖ All directional metrics present ({len(expected_directional_metrics)} metrics)\")\n        \n        # Verify values are correctly passed through\n        assert metrics['Number of Trades (All)'] == 20\n        assert metrics['Number of Trades (Long)'] == 12\n        assert metrics['Number of Trades (Short)'] == 8\n        assert metrics['Win Rate % (All)'] == 65.0\n        assert metrics['Reward/Risk Ratio (Long)'] == 2.133\n        \n        print(\"‚úÖ Directional metric values correctly integrated\")\n        \n        return True\n        \n    except Exception as e:\n        print(f\"‚ùå Enhanced performance metrics verification failed: {e}\")\n        import traceback\n        traceback.print_exc()\n        return False\n\ndef verify_new_metrics():\n    \"\"\"Verify the new metrics are calculated correctly.\"\"\"\n    print(\"\\nüéØ Verifying new metrics calculation...\")\n    \n    try:\n        from portfolio_backtester.trading.trade_tracker import TradeTracker, Trade\n        import pandas as pd\n        \n        # Create a tracker with known trades\n        tracker = TradeTracker()\n        \n        # Manually create some test trades with known outcomes\n        test_trades = [\n            # Long winning trade\n            Trade('AAPL', pd.Timestamp('2023-01-01'), pd.Timestamp('2023-01-05'), \n                  100.0, 110.0, 10, 1000.0, 5.0, 5.0),\n            # Long losing trade\n            Trade('MSFT', pd.Timestamp('2023-01-02'), pd.Timestamp('2023-01-06'),\n                  200.0, 190.0, 5, 1000.0, 5.0, 5.0),\n            # Short winning trade\n            Trade('GOOGL', pd.Timestamp('2023-01-03'), pd.Timestamp('2023-01-07'),\n                  2500.0, 2400.0, -2, 5000.0, 10.0, 10.0),\n            # Short losing trade\n            Trade('AMZN', pd.Timestamp('2023-01-04'), pd.Timestamp('2023-01-08'),\n                  3000.0, 3100.0, -1, 3000.0, 10.0, 10.0)\n        ]\n        \n        # Finalize all trades\n        for trade in test_trades:\n            trade.finalize()\n            tracker.trades.append(trade)\n        \n        # Get statistics\n        stats = tracker.get_trade_statistics()\n        \n        # Verify calculations\n        # Long trades: 1 winner (100 profit), 1 loser (-110 loss) = -10 net, but after commissions\n        # Short trades: 1 winner (180 profit), 1 loser (-120 loss) = 60 net, but after commissions\n        \n        # Check basic counts\n        assert stats['all_num_trades'] == 4\n        assert stats['long_num_trades'] == 2\n        assert stats['short_num_trades'] == 2\n        \n        # Check largest profits/losses\n        # Long: largest profit = 100*10 - 10 = 90, largest loss = -100*5 - 10 = -110\n        # Short: largest profit = 100*2 - 20 = 180, largest loss = -100*1 - 20 = -120\n        \n        print(f\"‚úÖ Trade counts verified: All={stats['all_num_trades']}, Long={stats['long_num_trades']}, Short={stats['short_num_trades']}\")\n        print(f\"‚úÖ Largest profits: All=${stats['all_largest_profit']:.2f}, Long=${stats['long_largest_profit']:.2f}, Short=${stats['short_largest_profit']:.2f}\")\n        print(f\"‚úÖ Reward/Risk ratios: All={stats['all_reward_risk_ratio']:.3f}, Long={stats['long_reward_risk_ratio']:.3f}, Short={stats['short_reward_risk_ratio']:.3f}\")\n        \n        return True\n        \n    except Exception as e:\n        print(f\"‚ùå New metrics verification failed: {e}\")\n        import traceback\n        traceback.print_exc()\n        return False\n\ndef main():\n    \"\"\"Run all verification tests.\"\"\"\n    print(\"=\"*80)\n    print(\"DIRECTIONAL TRADE STATISTICS VERIFICATION\")\n    print(\"=\"*80)\n    \n    tests = [\n        verify_directional_trade_tracker,\n        verify_enhanced_performance_metrics,\n        verify_new_metrics\n    ]\n    \n    results = []\n    for test in tests:\n        try:\n            result = test()\n            results.append(result)\n        except Exception as e:\n            print(f\"‚ùå Test {test.__name__} failed with exception: {e}\")\n            results.append(False)\n    \n    print(\"\\n\" + \"=\"*80)\n    print(\"VERIFICATION SUMMARY\")\n    print(\"=\"*80)\n    \n    passed = sum(results)\n    total = len(results)\n    \n    for i, (test, result) in enumerate(zip(tests, results)):\n        status = \"‚úÖ PASS\" if result else \"‚ùå FAIL\"\n        print(f\"{i+1}. {test.__name__:<40} {status}\")\n    \n    print(f\"\\nOverall: {passed}/{total} tests passed\")\n    \n    if passed == total:\n        print(\"\\nüéâ ALL VERIFICATIONS PASSED!\")\n        print(\"Directional trade statistics are ready for use.\")\n        return 0\n    else:\n        print(f\"\\n‚ùå {total - passed} verification(s) failed.\")\n        print(\"Please check the implementation before using directional metrics.\")\n        return 1\n\nif __name__ == \"__main__\":\n    sys.exit(main())