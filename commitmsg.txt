feat: Overhaul backtesting engine with new timing framework and features

This commit introduces a major refactoring of the backtesting engine to improve modularity, performance, and extensibility. It also adds several new strategies and a flexible timing framework.

Key changes include:

- **Core Engine Refactoring**:
  - The main `backtester.py` has been split into `core.py` and several modules under `backtester_logic`, `timing`, and `trading` for better separation of concerns.
  - The `cache/` directory has been moved to `data/cache/` to consolidate all data-related files.

- **New Timing Framework**:
  - A new, flexible timing framework has been introduced in `src/portfolio_backtester/timing/`.
  - Supports time-based, signal-based, and custom timing controllers, allowing for more sophisticated strategy implementation.
  - Includes backward compatibility for legacy configurations.

- **New Strategies and Data**:
  - Added three new strategies: `Intramonth_Seasonal`, `Momentum_Beta_Filtered`, and `UVXY_RSI_Strategy`.
  - Added `UVXY.csv` data to support the new volatility strategy.

- **Performance Optimizations**:
  - Introduced Numba-optimized functions for performance-critical calculations in features, position sizing, and synthetic data generation.

- **Data Handling Enhancements**:
  - Added a special data repair function for UVXY to handle reverse split inconsistencies.
  - Improved data normalization in the hybrid data source.

- **Configuration and Reporting**:
  - Added new scenarios to `config/scenarios.yaml` for the new strategies.
  - Created `config/timing_examples.yaml` to document the new timing framework.
  - Enhanced reporting to save performance metrics and optimal parameters to files in a unique directory for each run.

- **Agent and Project Guidelines**:
  - Added `AGENTS.md` with guidelines for AI agents interacting with the codebase.
  - Updated `.gitignore` to exclude agent-related files.
  - Refactored `pytest.ini` with more descriptive markers for better test organization.
