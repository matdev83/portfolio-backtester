C:\Users\Mateusz\source\repos\portfolio-backtester\scripts\line_profile_optimizer.py:31: UserWarning: Adding a function with a `.__wrapped__` attribute. You may want to profile the wrapped function by adding `size_positions.__wrapped__` instead.
  profiler.add_function(func)
2025-08-11 10:46:33,380 - INFO - Strategy validation passed - all strategies have corresponding default.yaml config files.
2025-08-11 10:46:34,862 - WARNING - No universe tickers found, using default start date
Warning: Scenario 'dummy_signal_default' contains invalid parameters not defined in OPTIMIZER_PARAMETER_DEFAULTS: ['close_long_prob', 'open_long_prob']
Downloading data... -------------------------------------- 100% 0:00:00 0:00:00
Fetching from stooq... ----------------------------------- 100% 0:00:00 0:00:00
[I 2025-08-11 10:46:35,035] A new study created in memory with name: dummy_signal_default_optuna_seed_1547311018_1754901995034
2025-08-11 10:51:54,692 - ERROR - Error creating trial P&L visualization: 'FrozenTrial' object has no attribute 'optimization_history'
2025-08-11 10:51:54,695 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,696 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,697 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,697 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,698 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,698 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,699 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,700 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,700 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,701 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,701 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,702 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,703 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,703 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,703 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,704 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,705 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,705 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,706 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,706 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,707 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,707 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,708 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,708 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,708 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,709 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,709 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,710 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,710 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,711 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,711 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,712 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,712 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,713 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,714 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,714 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,715 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,715 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,716 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,716 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,717 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,717 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,718 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,718 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,719 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,720 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,720 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,721 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,722 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,722 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,723 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,723 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,724 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,724 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,725 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,725 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,726 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,726 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:54,727 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,728 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
Stage 2 Monte Carlo Stress Testing… ---------------------- 100% 0:00:00 0:00:00
2025-08-11 10:51:54,734 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:54,734 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
C:\Users\Mateusz\source\repos\portfolio-backtester\src\portfolio_backtester\reporting\monte_carlo_stage2.py:230: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.
  ax.legend(loc="upper left", fontsize=9)
2025-08-11 10:51:56,462 - ERROR - Error creating trial P&L visualization: 'FrozenTrial' object has no attribute 'optimization_history'
2025-08-11 10:51:56,465 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,466 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,467 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,467 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,468 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,469 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,470 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,470 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,471 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,471 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,472 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,472 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,473 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,473 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,474 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,474 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,475 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,475 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,476 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,476 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,477 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,477 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,478 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,478 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,479 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,479 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,480 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,480 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,481 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,481 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,482 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,482 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,483 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,483 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,484 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,484 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,485 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,485 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,486 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,486 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,487 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,487 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,488 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,488 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,489 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,489 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,490 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,490 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,491 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,491 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,492 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,492 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,492 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,493 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,493 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,494 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,495 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,495 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
2025-08-11 10:51:56,497 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,497 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
Stage 2 Monte Carlo Stress Testing… ---------------------- 100% 0:00:00 0:00:00
2025-08-11 10:51:56,505 - WARNING - Tickers ['AAPL', 'AMZN', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'V', 'MCD', 'AVGO', 'AMD', 'WMT', 'COST', 'JPM', 'MA', 'MU', 'LLY', 'TGT', 'META', 'ORCL', 'PG', 'HD', 'JNJ', 'BAC', 'ABBV', 'XOM', 'CVX', 'WFC', 'CRM', 'GE', 'BA', 'ABT', 'MS', 'GS', 'DIS', 'LIN', 'MRK', 'RTX', 'BKNG', 'CAT', 'PEP', 'KO', 'INTU', 'TMUS', 'ACN', 'SCHW', 'TMO', 'SYK', 'AMGN', 'HON', 'AMAT', 'DHR', 'NEE', 'PLTR', 'UNH', 'GBTC', 'UVXY'] not found in price data; they will be skipped for this run.
2025-08-11 10:51:56,505 - WARNING - No universe tickers remain after filtering for missing data. Skipping scenario.
C:\Users\Mateusz\source\repos\portfolio-backtester\src\portfolio_backtester\reporting\monte_carlo_stage2.py:230: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.
  ax.legend(loc="upper left", fontsize=9)
                            Full-Period Performance                            
┌─────────────────────────────┬────────────────┬─────────────────┬────────────┐
│ Metric                      │ dummy_signal_… │ dummy_signal_d… │ SPY        │
├─────────────────────────────┼────────────────┼─────────────────┼────────────┤
│ Total Return                │ 0.30%          │ 0.30%           │ 425.30%    │
│ Ann. Return                 │ 0.02%          │ 0.02%           │ 14.29%     │
│ Ann. Vol                    │ 0.0297         │ 0.0297          │ 0.1716     │
│ Sharpe                      │ 0.0075         │ 0.0075          │ 0.8328     │
│ Sortino                     │ 0.0299         │ 0.0299          │ 1.2180     │
│ Calmar                      │ 0.0033         │ 0.0033          │ 0.4238     │
│ Alpha (ann)                 │ 0.0004         │ 0.0004          │ -0.0000    │
│ Beta                        │ 0.9857         │ 0.9857          │ 1.0000     │
│ Max Drawdown                │ -0.0674        │ -0.0674         │ -0.3372    │
│ VaR (5%)                    │ -0.0156        │ -0.0156         │ -0.0162    │
│ CVaR (5%)                   │ -0.0211        │ -0.0211         │ -0.0261    │
│ Tail Ratio                  │ 0.7830         │ 0.7830          │ 0.8011     │
│ Avg DD Duration             │ 450.2500       │ 450.2500        │ 11.2596    │
│ Avg Recovery Time           │ 0.0000         │ 0.0000          │ 0.0043     │
│ Skew                        │ -0.6248        │ -0.6248         │ -0.3244    │
│ Kurtosis                    │ 1.4266         │ 1.4266          │ 14.5975    │
│ R^2                         │ 0.9858         │ 0.9858          │ 1.0000     │
│ K-Ratio                     │ 40.8926        │ 40.8926         │ 18515.9082 │
│ ADF Statistic               │ -3.3452        │ -3.3452         │ 0.9863     │
│ ADF p-value                 │ 0.012975       │ 0.012975        │ 0.994120   │
│ Deflated Sharpe             │ 1.0000         │ 1.0000          │ 1.0000     │
│ Max DD Recovery Time (days) │ 764            │ 764             │ 708        │
│ Max Flat Period (days)      │ 1192           │ 1192            │ 1          │
└─────────────────────────────┴────────────────┴─────────────────┴────────────┘


         Trade Statistics - dummy_signal_default_Optimized          
┌───────────────────────┬─────────────┬─────────────┬──────────────┐
│ Metric                │  All Trades │ Long Trades │ Short Trades │
├───────────────────────┼─────────────┼─────────────┼──────────────┤
│ Number of Trades      │           8 │           8 │            0 │
│ Number of Winners     │           4 │           4 │            0 │
│ Number of Losers      │           4 │           4 │            0 │
│ Win Rate (%)          │      50.00% │      50.00% │        0.00% │
│ Total P&L Net         │   $7,070.35 │   $7,070.35 │        $0.00 │
│ Largest Single Profit │  $30,190.68 │  $30,190.68 │        $0.00 │
│ Largest Single Loss   │ $-47,779.50 │ $-47,779.50 │        $0.00 │
│ Mean Profit           │  $25,816.92 │  $25,816.92 │        $0.00 │
│ Mean Loss             │ $-24,049.33 │ $-24,049.33 │        $0.00 │
│ Mean Trade P&L        │     $883.79 │     $883.79 │        $0.00 │
│ Reward/Risk Ratio     │       1.073 │       1.073 │        0.000 │
│ Commissions Paid      │       $0.00 │       $0.00 │        $0.00 │
│ Avg MFE               │  $14,153.57 │  $14,153.57 │        $0.00 │
│ Avg MAE               │ $-23,171.67 │ $-23,171.67 │        $0.00 │
│ Min Duration (days)   │           0 │           0 │            0 │
│ Max Duration (days)   │          24 │          24 │            0 │
│ Mean Duration (days)  │       19.75 │       19.75 │         0.00 │
│ Information Score     │       0.046 │       0.046 │        0.000 │
│ Trades per Month      │        0.06 │        0.06 │         0.00 │
│                       │             │             │              │
│ Max Margin Load       │     100.00% │     100.00% │      100.00% │
│ Mean Margin Load      │       4.90% │       4.90% │        4.90% │
└───────────────────────┴─────────────┴─────────────┴──────────────┘


         Trade Statistics - dummy_signal_default_Optimized          
┌───────────────────────┬─────────────┬─────────────┬──────────────┐
│ Metric                │  All Trades │ Long Trades │ Short Trades │
├───────────────────────┼─────────────┼─────────────┼──────────────┤
│ Number of Trades      │           8 │           8 │            0 │
│ Number of Winners     │           4 │           4 │            0 │
│ Number of Losers      │           4 │           4 │            0 │
│ Win Rate (%)          │      50.00% │      50.00% │        0.00% │
│ Total P&L Net         │   $7,070.35 │   $7,070.35 │        $0.00 │
│ Largest Single Profit │  $30,190.68 │  $30,190.68 │        $0.00 │
│ Largest Single Loss   │ $-47,779.50 │ $-47,779.50 │        $0.00 │
│ Mean Profit           │  $25,816.92 │  $25,816.92 │        $0.00 │
│ Mean Loss             │ $-24,049.33 │ $-24,049.33 │        $0.00 │
│ Mean Trade P&L        │     $883.79 │     $883.79 │        $0.00 │
│ Reward/Risk Ratio     │       1.073 │       1.073 │        0.000 │
│ Commissions Paid      │       $0.00 │       $0.00 │        $0.00 │
│ Avg MFE               │  $14,153.57 │  $14,153.57 │        $0.00 │
│ Avg MAE               │ $-23,171.67 │ $-23,171.67 │        $0.00 │
│ Min Duration (days)   │           0 │           0 │            0 │
│ Max Duration (days)   │          24 │          24 │            0 │
│ Mean Duration (days)  │       19.75 │       19.75 │         0.00 │
│ Information Score     │       0.046 │       0.046 │        0.000 │
│ Trades per Month      │        0.06 │        0.06 │         0.00 │
│                       │             │             │              │
│ Max Margin Load       │     100.00% │     100.00% │      100.00% │
│ Mean Margin Load      │       4.90% │       4.90% │        4.90% │
└───────────────────────┴─────────────┴─────────────┴──────────────┘
        Optimal Parameters for        
    dummy_signal_default_Optimized    
┌───────────────────┬────────────────┐
│ Parameter         │ Value          │
├───────────────────┼────────────────┤
│ open_long_prob    │ 0.05           │
│ close_long_prob   │ 0.02           │
│ Constraint Status │ not_configured │
└───────────────────┴────────────────┘
        Optimal Parameters for        
    dummy_signal_default_Optimized    
┌───────────────────┬────────────────┐
│ Parameter         │ Value          │
├───────────────────┼────────────────┤
│ open_long_prob    │ 0.05           │
│ close_long_prob   │ 0.02           │
│ Constraint Status │ not_configured │
└───────────────────┴────────────────┘
Timer unit: 1e-07 s

Total time: 13.2977 s
File: C:\Users\Mateusz\source\repos\portfolio-backtester\src\portfolio_backtester\backtester_logic\portfolio_logic.py
Function: calculate_portfolio_returns at line 18

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    18                                           def calculate_portfolio_returns(
    19                                               sized_signals,
    20                                               scenario_config,
    21                                               price_data_daily_ohlc,
    22                                               rets_daily,
    23                                               universe_tickers,
    24                                               global_config,
    25                                               track_trades=False,
    26                                               strategy=None,
    27                                           ):
    28                                               # Check if this is a meta strategy - if so, use trade-based returns
    29        12       1877.0    156.4      0.0      strategy_resolver = StrategyResolverFactory.create()
    30        12        895.0     74.6      0.0      if strategy is not None and strategy_resolver.is_meta_strategy(type(strategy)):
    31                                                   return _calculate_meta_strategy_portfolio_returns(
    32                                                       strategy,
    33                                                       scenario_config,
    34                                                       price_data_daily_ohlc,
    35                                                       rets_daily,
    36                                                       universe_tickers,
    37                                                       global_config,
    38                                                       track_trades,
    39                                                   )
    40                                           
    41        12       1538.0    128.2      0.0      logger.debug("sized_signals shape: %s", sized_signals.shape)
    42        12      18099.0   1508.2      0.0      logger.debug("sized_signals head:\n%s", sized_signals.head())
    43                                           
    44                                               # Standard portfolio return calculation
    45        12        217.0     18.1      0.0      rebalance_frequency = scenario_config.get("timing_config", {}).get("rebalance_frequency", "M")
    46        12     452323.0  37693.6      0.3      weights_monthly = rebalance(sized_signals, rebalance_frequency)
    47                                           
    48        12        588.0     49.0      0.0      if logger.isEnabledFor(logging.DEBUG):
    49                                                   logger.debug("weights_monthly shape: %s", weights_monthly.shape)
    50                                                   logger.debug("weights_monthly head:\n%s", weights_monthly.head())
    51                                           
    52        12      53365.0   4447.1      0.0      weights_monthly = weights_monthly.reindex(columns=universe_tickers).fillna(0.0)
    53                                           
    54        12      72570.0   6047.5      0.1      weights_daily = weights_monthly.reindex(price_data_daily_ohlc.index, method="ffill")
    55                                               # Use previous-day weights for returns so first day's gross return is 0
    56        12      42879.0   3573.2      0.0      weights_for_returns = weights_daily.shift(1).fillna(0.0)
    57                                           
    58        12         76.0      6.3      0.0      if rets_daily is None:
    59                                                   logger.error("rets_daily is None before reindexing in run_scenario.")
    60                                                   return pd.Series(0.0, index=price_data_daily_ohlc.index)
    61                                           
    62        12      27319.0   2276.6      0.0      aligned_rets_daily = rets_daily.reindex(price_data_daily_ohlc.index).fillna(0.0)
    63                                           
    64                                               # Fast path: ndarray/Numba kernel if enabled
    65        12         46.0      3.8      0.0      feature_flags = (
    66        12        246.0     20.5      0.0          (global_config or {}).get("feature_flags", {}) if isinstance(global_config, dict) else {}
    67                                               )
    68                                               # Enable ndarray/Numba fast path by default; allow users to disable via config
    69        12        108.0      9.0      0.0      use_ndarray_sim = bool(feature_flags.get("ndarray_simulation", True))
    70                                           
    71                                               # Ensure variable is defined for all branches
    72        12         42.0      3.5      0.0      transaction_costs: pd.Series | None = None
    73                                           
    74        12         39.0      3.2      0.0      if use_ndarray_sim:
    75        12        143.0     11.9      0.0          import numpy as np
    76                                           
    77        12         42.0      3.5      0.0          predef_index = (
    78        12        131.0     10.9      0.0              price_data_daily_ohlc.index if hasattr(price_data_daily_ohlc, "index") else None
    79                                                   )
    80        12      16921.0   1410.1      0.0          daily_portfolio_returns_gross = pd.Series(0.0, index=predef_index)
    81        12         46.0      3.8      0.0          try:
    82        12        161.0     13.4      0.0              if isinstance(price_data_daily_ohlc.columns, pd.MultiIndex) and (
    83        12      16105.0   1342.1      0.0                  "Close" in price_data_daily_ohlc.columns.get_level_values(-1)
    84                                                       ):
    85        12     102387.0   8532.2      0.1                  close_prices_df = price_data_daily_ohlc.xs("Close", level="Field", axis=1)
    86        12         86.0      7.2      0.0                  price_index = close_prices_df.index
    87                                                       else:
    88                                                           close_prices_df = price_data_daily_ohlc
    89                                                           price_index = price_data_daily_ohlc.index
    90                                           
    91        12       1502.0    125.2      0.0              valid_cols = [t for t in universe_tickers if t in aligned_rets_daily.columns]
    92        12         44.0      3.7      0.0              r = (
    93        24      54873.0   2286.4      0.0                  aligned_rets_daily.reindex(index=price_index, columns=valid_cols)
    94        12      14668.0   1222.3      0.0                  .fillna(0.0)
    95        12        118.0      9.8      0.0                  .to_numpy(dtype=np.float32)
    96                                                       )
    97        12        564.0     47.0      0.0              m = ~np.isnan(r)
    98        12         47.0      3.9      0.0              w = (
    99        24      47610.0   1983.8      0.0                  weights_for_returns.reindex(index=price_index, columns=valid_cols)
   100        12      13345.0   1112.1      0.0                  .fillna(0.0)
   101        12        101.0      8.4      0.0                  .to_numpy(dtype=np.float32)
   102                                                       )
   103                                           
   104                                                       # Use single optimized kernel implementation
   105        12   26712149.0 2.23e+06     20.1              gross_arr, _, _ = position_and_pnl_kernel(w, r, m)
   106                                           
   107        12      15829.0   1319.1      0.0              daily_portfolio_returns_gross = pd.Series(gross_arr, index=price_index)
   108                                           
   109                                                       # Compute detailed IBKR-style commission+slippage in ndarray path
   110                                                       # Build close price matrix aligned to valid_cols and price_index
   111        36      50399.0   1400.0      0.0              close_prices_use = close_prices_df.reindex(
   112        12         41.0      3.4      0.0                  index=price_index, columns=valid_cols
   113        12      29501.0   2458.4      0.0              ).astype(float)
   114        12     108630.0   9052.5      0.1              price_mask = close_prices_use.notna() & (close_prices_use > 0)
   115        12      17770.0   1480.8      0.0              close_arr = close_prices_use.fillna(0.0).to_numpy(copy=True)
   116        12       1434.0    119.5      0.0              price_mask_arr = price_mask.to_numpy(copy=True)
   117                                           
   118                                                       # Read commission params from global_config
   119        12         39.0      3.2      0.0              commission_per_share = (
   120        12        225.0     18.8      0.0                  float(global_config.get("commission_per_share", 0.005))
   121        12        122.0     10.2      0.0                  if isinstance(global_config, dict)
   122                                                           else 0.005
   123                                                       )
   124        12        137.0     11.4      0.0              commission_min_per_order = (
   125        12        113.0      9.4      0.0                  float(global_config.get("commission_min_per_order", 1.0))
   126        12         57.0      4.8      0.0                  if isinstance(global_config, dict)
   127                                                           else 1.0
   128                                                       )
   129        12         43.0      3.6      0.0              commission_max_percent = (
   130        12        100.0      8.3      0.0                  float(global_config.get("commission_max_percent_of_trade", 0.005))
   131        12         50.0      4.2      0.0                  if isinstance(global_config, dict)
   132                                                           else 0.005
   133                                                       )
   134        12         37.0      3.1      0.0              slippage_bps = (
   135        12         97.0      8.1      0.0                  float(global_config.get("slippage_bps", 2.5))
   136        12         46.0      3.8      0.0                  if isinstance(global_config, dict)
   137                                                           else 2.5
   138                                                       )
   139        12        119.0      9.9      0.0              portfolio_value = (
   140        12        246.0     20.5      0.0                  float(global_config.get("portfolio_value", 100000.0))
   141        12         45.0      3.8      0.0                  if isinstance(global_config, dict)
   142                                                           else 100000.0
   143                                                       )
   144                                           
   145                                                       # Use current weights (not shifted) for turnover/commissions
   146        12         46.0      3.8      0.0              weights_current = (
   147        12      73651.0   6137.6      0.1                  weights_daily.reindex(index=price_index, columns=valid_cols).fillna(0.0).to_numpy()
   148                                                       )
   149                                           
   150                                                       # Use single optimized kernel implementation
   151        24   13268059.0 552835.8     10.0              tc_frac, tc_frac_detailed = detailed_commission_slippage_kernel(
   152        12         38.0      3.2      0.0                  weights_current=weights_current,
   153        12         46.0      3.8      0.0                  close_prices=close_arr,
   154        12         50.0      4.2      0.0                  portfolio_value=portfolio_value,
   155        12         38.0      3.2      0.0                  commission_per_share=commission_per_share,
   156        12         39.0      3.2      0.0                  commission_min_per_order=commission_min_per_order,
   157        12         42.0      3.5      0.0                  commission_max_percent=commission_max_percent,
   158        12         43.0      3.6      0.0                  slippage_bps=slippage_bps,
   159        12         35.0      2.9      0.0                  price_mask=price_mask_arr,
   160                                                       )
   161                                           
   162        12      22241.0   1853.4      0.0              transaction_costs = pd.Series(tc_frac, index=price_index, dtype=float)
   163        24      29503.0   1229.3      0.0              transaction_costs_detailed = pd.DataFrame(
   164        12         51.0      4.2      0.0                  tc_frac_detailed, index=price_index, columns=valid_cols
   165                                                       )
   166                                                   except Exception as e:
   167                                                       if logger.isEnabledFor(logging.WARNING):
   168                                                           logger.warning(f"ndarray_simulation failed, falling back to pandas path: {e}")
   169                                                       valid_universe_tickers_in_rets = [
   170                                                           ticker for ticker in universe_tickers if ticker in aligned_rets_daily.columns
   171                                                       ]
   172                                                       if len(valid_universe_tickers_in_rets) < len(universe_tickers):
   173                                                           missing_tickers = set(universe_tickers) - set(valid_universe_tickers_in_rets)
   174                                                           if logger.isEnabledFor(logging.WARNING):
   175                                                               logger.warning(
   176                                                                   f"Tickers {missing_tickers} not found in aligned_rets_daily columns. Portfolio calculations might be affected."
   177                                                               )
   178                                                       if not valid_universe_tickers_in_rets:
   179                                                           if logger.isEnabledFor(logging.WARNING):
   180                                                               logger.warning(
   181                                                                   "No valid universe tickers found in daily returns. Gross portfolio returns will be zero."
   182                                                               )
   183                                                           daily_portfolio_returns_gross = pd.Series(0.0, index=weights_for_returns.index)
   184                                                       else:
   185                                                           # Typing-friendly sum over columns (explicit DataFrame construction)
   186                                                           prod_df = pd.DataFrame(weights_for_returns[valid_universe_tickers_in_rets]).mul(
   187                                                               pd.DataFrame(aligned_rets_daily[valid_universe_tickers_in_rets]), axis=0
   188                                                           )
   189                                                           # Sum across assets (columns) to a per-day Series
   190                                                           daily_portfolio_returns_gross = pd.Series(
   191                                                               prod_df.sum(axis=1, numeric_only=True), index=prod_df.index
   192                                                           )
   193                                                           # Make sure transaction_costs is explicitly None to trigger pandas commission calc
   194                                                           transaction_costs = None
   195                                               else:
   196                                                   valid_universe_tickers_in_rets = [
   197                                                       ticker for ticker in universe_tickers if ticker in aligned_rets_daily.columns
   198                                                   ]
   199                                                   if len(valid_universe_tickers_in_rets) < len(universe_tickers):
   200                                                       missing_tickers = set(universe_tickers) - set(valid_universe_tickers_in_rets)
   201                                                       if logger.isEnabledFor(logging.WARNING):
   202                                                           logger.warning(
   203                                                               f"Tickers {missing_tickers} not found in aligned_rets_daily columns. Portfolio calculations might be affected."
   204                                                           )
   205                                           
   206                                                   if not valid_universe_tickers_in_rets:
   207                                                       if logger.isEnabledFor(logging.WARNING):
   208                                                           logger.warning(
   209                                                               "No valid universe tickers found in daily returns. Gross portfolio returns will be zero."
   210                                                           )
   211                                                       daily_portfolio_returns_gross = pd.Series(0.0, index=weights_for_returns.index)
   212                                                   else:
   213                                                       # Gross returns: use previous-day weights → first day gross = 0
   214                                                       # Typing-friendly sum over columns (explicit DataFrame construction)
   215                                                       prod_df = pd.DataFrame(weights_for_returns[valid_universe_tickers_in_rets]).mul(
   216                                                           pd.DataFrame(aligned_rets_daily[valid_universe_tickers_in_rets]), axis=0
   217                                                       )
   218                                                       # Sum across assets (columns) to a per-day Series
   219                                                       daily_portfolio_returns_gross = pd.Series(
   220                                                           prod_df.sum(axis=1, numeric_only=True), index=prod_df.index
   221                                                       )
   222                                           
   223                                               # Turnover per asset per day – change from previous day, but first day equal to current weights
   224                                               # Note: Some cost models may consume turnover; compute only if needed
   225                                               # turnover_per_asset = (weights_daily - weights_for_turnover.shift(1).fillna(0.0)).abs()
   226                                           
   227                                               # If ndarray fast path produced transaction_costs already, skip the pandas calculators; else use existing path
   228        12        102.0      8.5      0.0      if (not use_ndarray_sim) or (transaction_costs is None):
   229                                                   turnover = pd.Series(1.0, index=weights_daily.index, dtype=float)
   230                                                   transaction_costs_bps = scenario_config.get("transaction_costs_bps")
   231                                           
   232                                                   # Prefer the legacy factory if present (so monkeypatch in tests works),
   233                                                   # otherwise use the unified calculator.
   234                                                   try:
   235                                                       from ..trading import get_transaction_cost_model
   236                                           
   237                                                       # Legacy factory returns a TransactionCostModel, but in some deployments it may be replaced.
   238                                                       # Keep a separate variable name to avoid mypy narrowing issues.
   239                                                       legacy_tx_cost_model = get_transaction_cost_model(global_config)
   240                                                       # Legacy calculate may return scalar/Series/DataFrame. Normalize to per-day Series.
   241                                                       tc = legacy_tx_cost_model.calculate(
   242                                                           turnover=turnover,
   243                                                           weights_daily=weights_daily,
   244                                                           price_data=price_data_daily_ohlc,
   245                                                           portfolio_value=float(global_config.get("portfolio_value", 100000.0)),
   246                                                           transaction_costs_bps=transaction_costs_bps,
   247                                                       )
   248                                                       # Normalize to per-day Series
   249                                                       transaction_costs_obj: Any = tc[0] if isinstance(tc, tuple) else tc
   250                                                       if isinstance(transaction_costs_obj, pd.DataFrame):
   251                                                           # Sum across assets to daily series
   252                                                           transaction_costs = pd.Series(
   253                                                               transaction_costs_obj.sum(axis=1),
   254                                                               index=transaction_costs_obj.index,
   255                                                               dtype=float,
   256                                                           )
   257                                                       elif isinstance(transaction_costs_obj, pd.Series):
   258                                                           # If index mismatch (e.g., per-asset), reduce to scalar per day
   259                                                           if not transaction_costs_obj.index.equals(weights_daily.index):
   260                                                               val = (
   261                                                                   float(transaction_costs_obj.iloc[0]) if len(transaction_costs_obj) else 0.0
   262                                                               )
   263                                                               transaction_costs = pd.Series(val, index=weights_daily.index, dtype=float)
   264                                                           else:
   265                                                               transaction_costs = transaction_costs_obj.astype(float)
   266                                                       else:
   267                                                           # Scalar or other → broadcast to daily index
   268                                                           transaction_costs = pd.Series(
   269                                                               float(transaction_costs_obj), index=weights_daily.index, dtype=float
   270                                                           )
   271                                                       transaction_costs = (
   272                                                           transaction_costs.reindex(weights_daily.index).fillna(0.0).astype(float)
   273                                                       )
   274                                                   except Exception:
   275                                                       # Fallback to unified commission calculator
   276                                                       calculator = get_unified_commission_calculator(global_config)
   277                                                       # Unified calculator returns (Series, breakdown, detailed)
   278                                                       transaction_costs, _, _ = calculator.calculate(
   279                                                           turnover=turnover,
   280                                                           weights_daily=weights_daily,
   281                                                           price_data=price_data_daily_ohlc,
   282                                                           portfolio_value=float(global_config.get("portfolio_value", 100000.0)),
   283                                                           transaction_costs_bps=transaction_costs_bps,
   284                                                       )
   285                                                       # transaction_costs is already a per-day Series expressed as fraction of portfolio value
   286                                           
   287                                               # Net = gross - per-day transaction costs (already portfolio-value normalized)
   288                                               # Ensure transaction_costs is a Series aligned to daily_portfolio_returns_gross index
   289                                               # Defensive: ensure tc_series is defined and aligned; prefer provided Series
   290        12         49.0      4.1      0.0      tc_series = (
   291        12      31240.0   2603.3      0.0          transaction_costs.reindex(daily_portfolio_returns_gross.index).fillna(0.0)
   292        12        122.0     10.2      0.0          if isinstance(transaction_costs, pd.Series)
   293                                                   else pd.Series(data=0.0, index=daily_portfolio_returns_gross.index, dtype=float)
   294                                               )
   295                                               # Ensure both operands are Series[float] aligned to the same index
   296        24      36709.0   1529.5      0.0      daily_portfolio_returns_gross = pd.Series(
   297        12        111.0      9.2      0.0          daily_portfolio_returns_gross, index=daily_portfolio_returns_gross.index, dtype=float
   298                                               )
   299        12      26924.0   2243.7      0.0      tc_series = pd.Series(tc_series, index=tc_series.index, dtype=float)
   300        12      66053.0   5504.4      0.0      portfolio_rets_net = (daily_portfolio_returns_gross - tc_series).fillna(0.0).astype(float)
   301                                           
   302                                               # Initialize trade tracker if requested
   303        12         59.0      4.9      0.0      trade_tracker = None
   304        12         49.0      4.1      0.0      if track_trades:
   305         1         11.0     11.0      0.0          initial_portfolio_value = global_config.get("portfolio_value", 100000.0)
   306                                           
   307                                                   # Get allocation mode from scenario config (strategy-level setting)
   308         1          8.0      8.0      0.0          allocation_mode = scenario_config.get("allocation_mode", "reinvestment")
   309                                           
   310         1      17546.0  17546.0      0.0          trade_tracker = TradeTracker(initial_portfolio_value, allocation_mode)
   311                                           
   312                                                   # Use unified commission calculator for trade tracking too
   313         1        245.0    245.0      0.0          tx_cost_model = get_unified_commission_calculator(global_config)
   314         2   91525770.0 4.58e+07     68.8          _track_trades_with_dynamic_capital(
   315         1          2.0      2.0      0.0              trade_tracker,
   316         1          4.0      4.0      0.0              weights_daily,
   317         1          8.0      8.0      0.0              price_data_daily_ohlc,
   318         1          2.0      2.0      0.0              tx_cost_model,
   319         1          2.0      2.0      0.0              global_config,
   320         1          2.0      2.0      0.0              transaction_costs_detailed,
   321                                                   )
   322                                           
   323        12        182.0     15.2      0.0      return portfolio_rets_net, trade_tracker

Total time: 303.555 s
File: C:\Users\Mateusz\source\repos\portfolio-backtester\src\portfolio_backtester\backtester_logic\strategy_logic.py
Function: generate_signals at line 12

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    12                                           def generate_signals(
    13                                               strategy,
    14                                               scenario_config,
    15                                               price_data_daily_ohlc,
    16                                               universe_tickers,
    17                                               benchmark_ticker,
    18                                               has_timed_out,
    19                                           ):
    20                                               # Check if this is a meta strategy - if so, use trade-based approach
    21        12       1938.0    161.5      0.0      strategy_resolver = StrategyResolverFactory.create()
    22        12        814.0     67.8      0.0      if strategy_resolver.is_meta_strategy(type(strategy)):
    23                                                   return _generate_meta_strategy_signals(
    24                                                       strategy,
    25                                                       scenario_config,
    26                                                       price_data_daily_ohlc,
    27                                                       universe_tickers,
    28                                                       benchmark_ticker,
    29                                                       has_timed_out,
    30                                                   )
    31                                           
    32                                               # Standard strategy signal generation
    33        12        383.0     31.9      0.0      timing_controller = strategy.get_timing_controller()
    34        12       6747.0    562.2      0.0      timing_controller.reset_state()
    35                                           
    36        12       6208.0    517.3      0.0      start_date = price_data_daily_ohlc.index.min()
    37        12       3270.0    272.5      0.0      end_date = price_data_daily_ohlc.index.max()
    38                                           
    39        12        674.0     56.2      0.0      wfo_start_date = pd.to_datetime(scenario_config.get("wfo_start_date", None))
    40        12        304.0     25.3      0.0      wfo_end_date = pd.to_datetime(scenario_config.get("wfo_end_date", None))
    41                                           
    42        12         50.0      4.2      0.0      if wfo_start_date is not None:
    43                                                   start_date = max(start_date, wfo_start_date)
    44        12         39.0      3.2      0.0      if wfo_end_date is not None:
    45                                                   end_date = min(end_date, wfo_end_date)
    46                                           
    47        24     299870.0  12494.6      0.0      rebalance_dates = timing_controller.get_rebalance_dates(
    48        12         45.0      3.8      0.0          start_date=start_date,
    49        12         40.0      3.3      0.0          end_date=end_date,
    50        12         63.0      5.2      0.0          available_dates=price_data_daily_ohlc.index,
    51        12         37.0      3.1      0.0          strategy_context=strategy,
    52                                               )
    53                                           
    54                                               # Honor scenario-configured daily rebalance for meta strategies in single-path architecture
    55        12         64.0      5.3      0.0      try:
    56        12         57.0      4.8      0.0          configured_freq = (
    57        12        357.0     29.8      0.0              scenario_config.get("timing_config", {}).get("rebalance_frequency")
    58        12        235.0     19.6      0.0              if isinstance(scenario_config, dict)
    59                                                       else None
    60                                                   )
    61        12        115.0      9.6      0.0          if configured_freq == "D":
    62                                                       rebalance_dates = price_data_daily_ohlc.index
    63                                               except Exception:
    64                                                   # Fall back silently to timing controller dates on any issue
    65                                                   pass
    66                                           
    67        12         77.0      6.4      0.0      all_monthly_weights = []
    68                                           
    69                                               # OPTIMIZATION: Pre-calculate unique fields to avoid repeated computation in the loop.
    70        12         63.0      5.2      0.0      unique_fields = []
    71        12        381.0     31.8      0.0      if isinstance(price_data_daily_ohlc.columns, pd.MultiIndex):
    72        12      25714.0   2142.8      0.0          unique_fields = list(price_data_daily_ohlc.columns.get_level_values("Field").unique())
    73                                           
    74     22541     714670.0     31.7      0.0      for current_rebalance_date in rebalance_dates:
    75     22529     451793.0     20.1      0.0          if has_timed_out():
    76                                                       logger.warning("Timeout reached during scenario run. Halting signal generation.")
    77                                                       break
    78                                           
    79     45058    8088752.0    179.5      0.3          should_generate = timing_controller.should_generate_signal(
    80     22529      83552.0      3.7      0.0              current_date=current_rebalance_date, strategy_context=strategy
    81                                                   )
    82                                           
    83     22529      88484.0      3.9      0.0          if not should_generate:
    84                                                       if logger.isEnabledFor(logging.DEBUG):
    85                                                           logger.debug(
    86                                                               f"Timing controller skipped signal generation for date: {current_rebalance_date}"
    87                                                           )
    88                                                       continue
    89                                           
    90     22529    1129226.0     50.1      0.0          if logger.isEnabledFor(logging.DEBUG):
    91                                                       logger.debug(f"Generating signals for date: {current_rebalance_date}")
    92                                           
    93                                                   # SLICING OPTIMIZATION:
    94                                                   # Instead of slicing the entire history on every iteration, we can
    95                                                   # create a view of the data up to the current rebalance date.
    96                                           
    97                                                   # Get the historical data up to the current rebalance date
    98     22529   49769096.0   2209.1      1.6          historical_data_view = price_data_daily_ohlc.loc[:current_rebalance_date]
    99                                           
   100     22529      85304.0      3.8      0.0          if (
   101     22529     398654.0     17.7      0.0              isinstance(historical_data_view.columns, pd.MultiIndex)
   102     22529     636256.0     28.2      0.0              and "Ticker" in historical_data_view.columns.names
   103                                                   ):
   104     45058  350710400.0   7783.5     11.6              asset_hist_data_cols = pd.MultiIndex.from_product(
   105     22529      93245.0      4.1      0.0                  [
   106     22529      85835.0      3.8      0.0                      universe_tickers,
   107     22529      95298.0      4.2      0.0                      unique_fields,
   108                                                           ],
   109     22529      86239.0      3.8      0.0                  names=["Ticker", "Field"],
   110                                                       )
   111                                                       # Use intersection to preserve MultiIndex dtype
   112     22529   55441213.0   2460.9      1.8              asset_hist_data_cols = asset_hist_data_cols.intersection(historical_data_view.columns)
   113     22529  215911526.0   9583.7      7.1              all_historical_data_for_strat = historical_data_view.loc[:, asset_hist_data_cols]
   114                                           
   115     45058  339014148.0   7524.0     11.2              benchmark_hist_data_cols = pd.MultiIndex.from_product(
   116     22529      87437.0      3.9      0.0                  [
   117     22529     116924.0      5.2      0.0                      [benchmark_ticker],
   118     22529      85071.0      3.8      0.0                      unique_fields,
   119                                                           ],
   120     22529     106165.0      4.7      0.0                  names=["Ticker", "Field"],
   121                                                       )
   122     45058   51507155.0   1143.1      1.7              benchmark_hist_data_cols = benchmark_hist_data_cols.intersection(
   123     22529     436842.0     19.4      0.0                  historical_data_view.columns
   124                                                       )
   125     45058  204205960.0   4532.1      6.7              benchmark_historical_data_for_strat = historical_data_view.loc[
   126     22529     131802.0      5.9      0.0                  :, benchmark_hist_data_cols
   127                                                       ]
   128                                                   else:
   129                                                       all_historical_data_for_strat = historical_data_view.loc[:, universe_tickers]
   130                                                       benchmark_historical_data_for_strat = historical_data_view.loc[:, [benchmark_ticker]]
   131                                           
   132     22529     612145.0     27.2      0.0          non_universe_tickers = strategy.get_non_universe_data_requirements()
   133     22529  129622086.0   5753.6      4.3          non_universe_historical_data_for_strat = pd.DataFrame()
   134     22529     132984.0      5.9      0.0          if non_universe_tickers:
   135                                                       if (
   136                                                           isinstance(historical_data_view.columns, pd.MultiIndex)
   137                                                           and "Ticker" in historical_data_view.columns.names
   138                                                       ):
   139                                                           non_universe_hist_data_cols = pd.MultiIndex.from_product(
   140                                                               [
   141                                                                   non_universe_tickers,
   142                                                                   unique_fields,
   143                                                               ],
   144                                                               names=["Ticker", "Field"],
   145                                                           )
   146                                                           non_universe_hist_data_cols = non_universe_hist_data_cols.intersection(
   147                                                               historical_data_view.columns
   148                                                           )
   149                                                           non_universe_historical_data_for_strat = historical_data_view.loc[
   150                                                               :,
   151                                                               non_universe_hist_data_cols,
   152                                                           ]
   153                                                       else:
   154                                                           non_universe_historical_data_for_strat = historical_data_view.loc[
   155                                                               :, non_universe_tickers
   156                                                           ]
   157                                           
   158     22529     502847.0     22.3      0.0          import inspect
   159                                           
   160     22529   50346443.0   2234.7      1.7          sig = inspect.signature(strategy.generate_signals)
   161     22529     357067.0     15.8      0.0          if "non_universe_historical_data" in sig.parameters:
   162     45058 1088928720.0  24167.3     35.9              current_weights_df = strategy.generate_signals(
   163     22529      81322.0      3.6      0.0                  all_historical_data=all_historical_data_for_strat,
   164     22529      70462.0      3.1      0.0                  benchmark_historical_data=benchmark_historical_data_for_strat,
   165     22529      73437.0      3.3      0.0                  non_universe_historical_data=non_universe_historical_data_for_strat,
   166     22529     106327.0      4.7      0.0                  current_date=current_rebalance_date,
   167     22529      64182.0      2.8      0.0                  start_date=wfo_start_date,
   168     22529      61958.0      2.8      0.0                  end_date=wfo_end_date,
   169                                                       )
   170                                                   else:
   171                                                       current_weights_df = strategy.generate_signals(
   172                                                           all_historical_data=all_historical_data_for_strat,
   173                                                           benchmark_historical_data=benchmark_historical_data_for_strat,
   174                                                           current_date=current_rebalance_date,
   175                                                           start_date=wfo_start_date,
   176                                                           end_date=wfo_end_date,
   177                                                       )
   178                                           
   179     22529    3681355.0    163.4      0.1          if current_weights_df is not None and not current_weights_df.empty:
   180     22529     842393.0     37.4      0.0              if len(current_weights_df) > 0:
   181     22529   28276100.0   1255.1      0.9                  current_weights_series = current_weights_df.iloc[0]
   182     45058   46189189.0   1025.1      1.5                  timing_controller.update_signal_state(
   183     22529      80293.0      3.6      0.0                      current_rebalance_date, current_weights_series
   184                                                           )
   185                                           
   186     22529      87668.0      3.9      0.0                  try:
   187     45058     253058.0      5.6      0.0                      if isinstance(
   188     22529     449555.0     20.0      0.0                          price_data_daily_ohlc.columns, pd.MultiIndex
   189     22529   28712835.0   1274.5      0.9                      ) and "Close" in price_data_daily_ohlc.columns.get_level_values(1):
   190     45058  206928559.0   4592.5      6.8                          current_prices = price_data_daily_ohlc.loc[current_rebalance_date].xs(
   191     22529     117651.0      5.2      0.0                              "Close", level="Field"
   192                                                                   )
   193                                                               elif not isinstance(price_data_daily_ohlc.columns, pd.MultiIndex):
   194                                                                   current_prices = price_data_daily_ohlc.loc[current_rebalance_date]
   195                                                               else:
   196                                                                   try:
   197                                                                       current_prices = price_data_daily_ohlc.loc[current_rebalance_date].xs(
   198                                                                           "Close", level=-1
   199                                                                       )
   200                                                                   except Exception:
   201                                                                       current_prices = price_data_daily_ohlc.loc[current_rebalance_date].iloc[
   202                                                                           : len(universe_tickers)
   203                                                                       ]
   204                                           
   205     22529  123693016.0   5490.4      4.1                      universe_prices = current_prices.reindex(universe_tickers).ffill()
   206                                           
   207     45058   25124755.0    557.6      0.8                      timing_controller.update_position_state(
   208     22529     102285.0      4.5      0.0                          current_rebalance_date, current_weights_series, universe_prices
   209                                                               )
   210                                           
   211                                                           except Exception as e:
   212                                                               if logger.isEnabledFor(logging.DEBUG):
   213                                                                   logger.debug(
   214                                                                       f"Could not update position state for {current_rebalance_date}: {e}"
   215                                                                   )
   216                                           
   217     22529     278014.0     12.3      0.0          all_monthly_weights.append(current_weights_df)
   218                                           
   219        12         62.0      5.2      0.0      if not all_monthly_weights:
   220                                                   if logger.isEnabledFor(logging.WARNING):
   221                                                       logger.warning(
   222                                                           f"No signals generated for scenario {scenario_config['name']}. This might be due to WFO window or other issues."
   223                                                       )
   224                                                   signals = pd.DataFrame(columns=universe_tickers, index=rebalance_dates)
   225                                               else:
   226        12   19786083.0 1.65e+06      0.7          signals = pd.concat(all_monthly_weights)
   227        12      74601.0   6216.8      0.0          signals = signals.reindex(rebalance_dates).fillna(0.0)
   228                                           
   229                                               # DEPRECATED: Framework-level trade direction filtering has been replaced
   230                                               # by strict enforcement at the strategy level. Strategies now throw
   231                                               # TradeDirectionViolationError if they violate trade_longs/trade_shorts constraints.
   232                                               # This prevents coding errors and ensures immediate failure rather than silent filtering.
   233                                               # The framework filtering is kept for backward compatibility but should not be needed.
   234                                           
   235        12         53.0      4.4      0.0      return signals

Total time: 45.9747 s
File: C:\Users\Mateusz\source\repos\portfolio-backtester\src\portfolio_backtester\backtesting\strategy_backtester.py
Function: backtest_strategy at line 62

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    62                                               def backtest_strategy(
    63                                                   self,
    64                                                   strategy_config: Dict[str, Any],
    65                                                   monthly_data: pd.DataFrame,
    66                                                   daily_data: pd.DataFrame,
    67                                                   rets_full: pd.DataFrame,
    68                                               ) -> BacktestResult:
    69                                                   """Execute a complete backtest for a strategy configuration.
    70                                           
    71                                                   This method runs a full backtest for the given strategy configuration
    72                                                   and returns structured results with metrics, trades, and P&L data.
    73                                           
    74                                                   Args:
    75                                                       strategy_config: Strategy configuration including name and parameters
    76                                                       monthly_data: Monthly price data
    77                                                       daily_data: Daily OHLC price data
    78                                                       rets_full: Daily returns data
    79                                           
    80                                                   Returns:
    81                                                       BacktestResult: Complete backtest results with all performance data
    82                                                   """
    83         1         46.0     46.0      0.0          if logger.isEnabledFor(logging.DEBUG):
    84                                                       logger.debug(f"Running backtest for strategy: {strategy_config.get('name', 'Unknown')}")
    85                                           
    86                                                   # Get strategy instance
    87         2      11014.0   5507.0      0.0          strategy = self._get_strategy(
    88         1         17.0     17.0      0.0              strategy_config["strategy"], strategy_config["strategy_params"]
    89                                                   )
    90                                           
    91                                                   # Determine universe
    92         1         12.0     12.0      0.0          if "universe" in strategy_config:
    93                                                       try:
    94                                                           from ..interfaces.ticker_collector import TickerCollectorFactory
    95                                           
    96                                                           collector = TickerCollectorFactory.create_collector(strategy_config["universe"])
    97                                                           universe_tickers = collector.collect_tickers(strategy_config["universe"])
    98                                                       except Exception as e:
    99                                                           logger.error(f"Failed to collect universe tickers: {e}")
   100                                                           universe_tickers = []
   101         1         10.0     10.0      0.0          elif "universe_config" in strategy_config:
   102         1          6.0      6.0      0.0              try:
   103         1        102.0    102.0      0.0                  from ..interfaces.ticker_collector import TickerCollectorFactory
   104                                           
   105         2         65.0     32.5      0.0                  collector = TickerCollectorFactory.create_collector(
   106         1          7.0      7.0      0.0                      strategy_config["universe_config"]
   107                                                           )
   108         1        337.0    337.0      0.0                  universe_tickers = collector.collect_tickers(strategy_config["universe_config"])
   109                                                       except Exception as e:
   110                                                           logger.error(f"Failed to collect universe config tickers: {e}")
   111                                                           universe_tickers = []
   112                                                   else:
   113                                                       # Only use strategy.get_universe as last resort, not global config universe
   114                                                       universe_tickers = [item[0] for item in strategy.get_universe(self.global_config)]
   115                                           
   116                                                   # Filter out missing tickers
   117         1        147.0    147.0      0.0          missing_cols = [t for t in universe_tickers if t not in monthly_data.columns]
   118         1          7.0      7.0      0.0          if missing_cols:
   119                                                       if logger.isEnabledFor(logging.WARNING):
   120                                                           logger.warning(
   121                                                               f"Tickers {missing_cols} not found in price data; they will be skipped."
   122                                                           )
   123                                                       universe_tickers = [t for t in universe_tickers if t not in missing_cols]
   124                                           
   125         1          6.0      6.0      0.0          if not universe_tickers:
   126                                                       logger.warning("No universe tickers remain after filtering. Returning empty results.")
   127                                                       return self._create_empty_backtest_result()
   128                                           
   129         1         20.0     20.0      0.0          benchmark_ticker = self.global_config["benchmark"]
   130                                           
   131                                                   # Prepare data
   132         1      65854.0  65854.0      0.0          monthly_closes, rets_daily = prepare_scenario_data(daily_data, self.data_cache)
   133                                           
   134                                                   # Generate signals
   135         2  367426389.0 1.84e+08     79.9          signals = generate_signals(
   136         1          5.0      5.0      0.0              strategy,
   137         1          3.0      3.0      0.0              strategy_config,
   138         1          4.0      4.0      0.0              daily_data,
   139         1          3.0      3.0      0.0              universe_tickers,
   140         1          2.0      2.0      0.0              benchmark_ticker,
   141         1          7.0      7.0      0.0              lambda: False,  # No timeout for pure backtesting
   142                                                   )
   143                                           
   144                                                   # Size positions
   145         2      27433.0  13716.5      0.0          sized_signals = size_positions(
   146         1         11.0     11.0      0.0              signals,
   147         1         11.0     11.0      0.0              strategy_config,
   148         1          4.0      4.0      0.0              monthly_closes,
   149         1          4.0      4.0      0.0              daily_data,
   150         1          7.0      7.0      0.0              universe_tickers,
   151         1          3.0      3.0      0.0              benchmark_ticker,
   152         1          3.0      3.0      0.0              strategy,
   153                                                   )
   154                                           
   155                                                   # Calculate portfolio returns with trade tracking
   156         2   91651675.0 4.58e+07     19.9          result = calculate_portfolio_returns(
   157         1          3.0      3.0      0.0              sized_signals,
   158         1          3.0      3.0      0.0              strategy_config,
   159         1          3.0      3.0      0.0              daily_data,
   160         1          3.0      3.0      0.0              rets_daily,
   161         1          2.0      2.0      0.0              universe_tickers,
   162         1         10.0     10.0      0.0              self.global_config,
   163         1          3.0      3.0      0.0              track_trades=True,
   164         1          3.0      3.0      0.0              strategy=strategy,
   165                                                   )
   166                                           
   167                                                   # Handle both old and new return formats
   168         1          5.0      5.0      0.0          trade_tracker = None
   169         1         12.0     12.0      0.0          if isinstance(result, tuple):
   170         1          4.0      4.0      0.0              portfolio_returns, trade_tracker = result
   171         1       9239.0   9239.0      0.0              trade_stats = trade_tracker.get_trade_statistics() if trade_tracker else None
   172                                                   else:
   173                                                       portfolio_returns = result
   174                                                       trade_stats = None
   175                                           
   176         1         62.0     62.0      0.0          if portfolio_returns is None or portfolio_returns.empty:
   177                                                       logger.warning("No portfolio returns generated. Returning empty results.")
   178                                                       return self._create_empty_backtest_result()
   179                                           
   180                                                   # Calculate benchmark returns for metrics
   181         1          5.0      5.0      0.0          benchmark_data = (
   182         1       9528.0   9528.0      0.0              daily_data[benchmark_ticker] if benchmark_ticker in daily_data.columns else None
   183                                                   )
   184         1          3.0      3.0      0.0          if benchmark_data is not None:
   185         1      14604.0  14604.0      0.0              benchmark_returns = benchmark_data.pct_change(fill_method=None).fillna(0)
   186                                                   else:
   187                                                       benchmark_returns = pd.Series(0.0, index=portfolio_returns.index)
   188                                           
   189                                                   # Calculate performance metrics with trade statistics
   190         2     450773.0 225386.5      0.1          metrics = calculate_metrics(
   191         1          4.0      4.0      0.0              portfolio_returns, benchmark_returns, benchmark_ticker, trade_stats=trade_stats
   192                                                   )
   193                                           
   194                                                   # Create trade history from trade tracker
   195         1          7.0      7.0      0.0          if trade_tracker:
   196         1         44.0     44.0      0.0              completed_trades = trade_tracker.trade_lifecycle_manager.get_completed_trades()
   197         1      17373.0  17373.0      0.0              trade_history = pd.DataFrame([t.__dict__ for t in completed_trades])
   198                                                   else:
   199                                                       trade_history = self._create_trade_history(sized_signals, daily_data)
   200                                           
   201                                                   # Create performance stats
   202         1      16786.0  16786.0      0.0          performance_stats = self._create_performance_stats(portfolio_returns, metrics)
   203                                           
   204                                                   # Create charts data
   205         1      32390.0  32390.0      0.0          charts_data = self._create_charts_data(portfolio_returns, benchmark_returns)
   206                                           
   207                                                   # Store trade statistics in the result
   208         1      12565.0  12565.0      0.0          trade_stats = trade_tracker.get_trade_statistics() if trade_tracker else None
   209                                           
   210         2        121.0     60.5      0.0          return BacktestResult(
   211         1          3.0      3.0      0.0              returns=portfolio_returns,
   212         1          4.0      4.0      0.0              metrics=metrics,
   213         1          3.0      3.0      0.0              trade_history=trade_history,
   214         1          5.0      5.0      0.0              performance_stats=performance_stats,
   215         1          4.0      4.0      0.0              charts_data=charts_data,
   216         1          2.0      2.0      0.0              trade_stats=trade_stats,
   217                                                   )

Total time: 0.0405589 s
File: C:\Users\Mateusz\source\repos\portfolio-backtester\src\portfolio_backtester\interfaces\enforcement.py
Function: wrapper at line 61

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    61                                               @wraps(func)
    62                                               def wrapper(*args, **kwargs):
    63                                                   # Check if strategy is provided as positional or keyword argument
    64        12         83.0      6.9      0.0          strategy_provided = (
    65        12        812.0     67.7      0.2              (len(args) >= 7 and args[6] is not None) or  # strategy as 7th positional arg
    66                                                       ('strategy' in kwargs and kwargs['strategy'] is not None)
    67                                                   )
    68                                                   
    69        12         78.0      6.5      0.0          if not strategy_provided:
    70                                                       raise LegacyUsageError(
    71                                                           f"{func.__name__} must be called with strategy parameter to use provider interfaces. "
    72                                                           f"Example: {func.__name__}(..., strategy=strategy_instance)"
    73                                                       )
    74                                                   
    75        12     404616.0  33718.0     99.8          return func(*args, **kwargs)


Profiling results saved to: C:\Users\Mateusz\AppData\Local\Temp\line_profile_results_20250811-105201.txt
