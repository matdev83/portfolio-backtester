{
  "portfolio_backtester.config_initializer.populate_default_optimizations": {
    "module": "portfolio_backtester.config_initializer",
    "name": "populate_default_optimizations",
    "signature": "(scenarios: list, optimizer_parameter_defaults: dict)",
    "strict_params": true,
    "strict_return": false,
    "type_hints": {
      "optimizer_parameter_defaults": "<class 'dict'>",
      "scenarios": "<class 'list'>"
    },
    "version": "1.0"
  },
  "portfolio_backtester.core.Backtester.__init__": {
    "module": "portfolio_backtester.core",
    "name": "Backtester.__init__",
    "signature": "(self, global_config: Dict[str, Any], scenarios: List[Dict[str, Any]], args: argparse.Namespace, random_state: Optional[int] = None) -> None",
    "strict_params": true,
    "strict_return": false,
    "type_hints": {
      "args": "<class 'argparse.Namespace'>",
      "global_config": "typing.Dict[str, typing.Any]",
      "random_state": "typing.Optional[int]",
      "return": "None",
      "scenarios": "typing.List[typing.Dict[str, typing.Any]]"
    },
    "version": "1.0"
  },
  "portfolio_backtester.core.Backtester.run": {
    "module": "portfolio_backtester.core",
    "name": "Backtester.run",
    "signature": "(self) -> None",
    "strict_params": true,
    "strict_return": false,
    "type_hints": {
      "return": "None"
    },
    "version": "1.0"
  },
  "portfolio_backtester.core.Backtester.run_scenario": {
    "module": "portfolio_backtester.core",
    "name": "Backtester.run_scenario",
    "signature": "(self, scenario_config: Dict[str, Any], price_data_monthly_closes: pandas.core.frame.DataFrame, price_data_daily_ohlc: pandas.core.frame.DataFrame, rets_daily: Optional[pandas.core.frame.DataFrame] = None, verbose: bool = True) -> Optional[pandas.core.series.Series]",
    "strict_params": true,
    "strict_return": true,
    "type_hints": {
      "price_data_daily_ohlc": "<class 'pandas.core.frame.DataFrame'>",
      "price_data_monthly_closes": "<class 'pandas.core.frame.DataFrame'>",
      "rets_daily": "typing.Optional[pandas.core.frame.DataFrame]",
      "return": "typing.Optional[pandas.core.series.Series]",
      "scenario_config": "typing.Dict[str, typing.Any]",
      "verbose": "<class 'bool'>"
    },
    "version": "1.0"
  },
  "portfolio_backtester.optimization.elite_archive.EliteArchive.add": {
    "module": "portfolio_backtester.optimization.elite_archive",
    "name": "EliteArchive.add",
    "signature": "(self, chromosome: 'np.ndarray', fitness: 'float', generation: 'int') -> 'None'",
    "strict_params": true,
    "strict_return": false,
    "type_hints": {
      "chromosome": "np.ndarray",
      "fitness": "float",
      "generation": "int",
      "return": "None"
    },
    "version": "1.0"
  },
  "portfolio_backtester.optimization.optuna_objective.build_objective": {
    "module": "portfolio_backtester.optimization.optuna_objective",
    "name": "build_objective",
    "signature": "(g_cfg: Dict, base_scen_cfg: Dict, train_data_monthly, train_data_daily, train_rets_daily, bench_series_daily, features_slice)",
    "strict_params": true,
    "strict_return": false,
    "type_hints": {
      "base_scen_cfg": "typing.Dict",
      "g_cfg": "typing.Dict"
    },
    "version": "1.0"
  },
  "portfolio_backtester.strategies.base_strategy.BaseStrategy.generate_signals": {
    "module": "portfolio_backtester.strategies.base_strategy",
    "name": "BaseStrategy.generate_signals",
    "signature": "(self, all_historical_data: 'pd.DataFrame', benchmark_historical_data: 'pd.DataFrame', non_universe_historical_data: 'pd.DataFrame', current_date: 'pd.Timestamp', start_date: 'Optional[pd.Timestamp]' = None, end_date: 'Optional[pd.Timestamp]' = None) -> 'pd.DataFrame'",
    "strict_params": true,
    "strict_return": true,
    "type_hints": {
      "all_historical_data": "pd.DataFrame",
      "benchmark_historical_data": "pd.DataFrame",
      "current_date": "pd.Timestamp",
      "end_date": "Optional[pd.Timestamp]",
      "non_universe_historical_data": "pd.DataFrame",
      "return": "pd.DataFrame",
      "start_date": "Optional[pd.Timestamp]"
    },
    "version": "1.0"
  },
  "portfolio_backtester.strategies.base_strategy.BaseStrategy.get_roro_signal": {
    "module": "portfolio_backtester.strategies.base_strategy",
    "name": "BaseStrategy.get_roro_signal",
    "signature": "(self) -> 'Optional[BaseRoRoSignal]'",
    "strict_params": true,
    "strict_return": false,
    "type_hints": {
      "return": "Optional[BaseRoRoSignal]"
    },
    "version": "1.0"
  },
  "portfolio_backtester.strategies.base_strategy.BaseStrategy.validate_data_sufficiency": {
    "module": "portfolio_backtester.strategies.base_strategy",
    "name": "BaseStrategy.validate_data_sufficiency",
    "signature": "(self, all_historical_data: 'pd.DataFrame', benchmark_historical_data: 'pd.DataFrame', current_date: 'pd.Timestamp') -> 'tuple[bool, str]'",
    "strict_params": true,
    "strict_return": false,
    "type_hints": {
      "all_historical_data": "pd.DataFrame",
      "benchmark_historical_data": "pd.DataFrame",
      "current_date": "pd.Timestamp",
      "return": "tuple[bool, str]"
    },
    "version": "1.0"
  },
  "portfolio_backtester.strategies.candidate_weights.default_candidate_weights": {
    "module": "portfolio_backtester.strategies.candidate_weights",
    "name": "default_candidate_weights",
    "signature": "(scores: pandas.core.series.Series, params: Optional[Dict[str, Any]] = None) -> pandas.core.series.Series",
    "strict_params": true,
    "strict_return": false,
    "type_hints": {
      "params": "typing.Optional[typing.Dict[str, typing.Any]]",
      "return": "<class 'pandas.core.series.Series'>",
      "scores": "<class 'pandas.core.series.Series'>"
    },
    "version": "1.0"
  },
  "portfolio_backtester.strategies.leverage_and_smoothing.apply_leverage_and_smoothing": {
    "module": "portfolio_backtester.strategies.leverage_and_smoothing",
    "name": "apply_leverage_and_smoothing",
    "signature": "(candidate_weights: pandas.core.series.Series, prev_weights: Optional[pandas.core.series.Series], params: Optional[Dict[str, Any]] = None) -> pandas.core.series.Series",
    "strict_params": true,
    "strict_return": false,
    "type_hints": {
      "candidate_weights": "<class 'pandas.core.series.Series'>",
      "params": "typing.Optional[typing.Dict[str, typing.Any]]",
      "prev_weights": "typing.Optional[pandas.core.series.Series]",
      "return": "<class 'pandas.core.series.Series'>"
    },
    "version": "1.0"
  },
  "portfolio_backtester.timing.custom_timing_registry.CustomTimingRegistry.get": {
    "module": "portfolio_backtester.timing.custom_timing_registry",
    "name": "CustomTimingRegistry.get",
    "signature": "(cls, name: str) -> Optional[Type[portfolio_backtester.timing.timing_controller.TimingController]]",
    "strict_params": true,
    "strict_return": false,
    "type_hints": {
      "name": "<class 'str'>",
      "return": "typing.Optional[typing.Type[portfolio_backtester.timing.timing_controller.TimingController]]"
    },
    "version": "1.0"
  },
  "portfolio_backtester.timing.timing_controller.TimingController.get_rebalance_dates": {
    "module": "portfolio_backtester.timing.timing_controller",
    "name": "TimingController.get_rebalance_dates",
    "signature": "(self, start_date: pandas._libs.tslibs.timestamps.Timestamp, end_date: pandas._libs.tslibs.timestamps.Timestamp, available_dates: pandas.core.indexes.datetimes.DatetimeIndex, strategy_context: 'BaseStrategy') -> pandas.core.indexes.datetimes.DatetimeIndex",
    "strict_params": true,
    "strict_return": false,
    "type_hints": {
      "available_dates": "<class 'pandas.core.indexes.datetimes.DatetimeIndex'>",
      "end_date": "<class 'pandas._libs.tslibs.timestamps.Timestamp'>",
      "return": "<class 'pandas.core.indexes.datetimes.DatetimeIndex'>",
      "start_date": "<class 'pandas._libs.tslibs.timestamps.Timestamp'>",
      "strategy_context": "BaseStrategy"
    },
    "version": "1.0"
  },
  "portfolio_backtester.universe_loader.load_named_universe": {
    "module": "portfolio_backtester.universe_loader",
    "name": "load_named_universe",
    "signature": "(universe_name: str) -> List[str]",
    "strict_params": true,
    "strict_return": false,
    "type_hints": {
      "return": "typing.List[str]",
      "universe_name": "<class 'str'>"
    },
    "version": "1.0"
  },
  "portfolio_backtester.utils._resolve_strategy": {
    "module": "portfolio_backtester.utils",
    "name": "_resolve_strategy",
    "signature": "(name: str)",
    "strict_params": true,
    "strict_return": false,
    "type_hints": {
      "name": "<class 'str'>"
    },
    "version": "1.0"
  }
}